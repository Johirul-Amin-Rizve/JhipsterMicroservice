
application {
  config {
    baseName router
    applicationType gateway
    packageName com.ailaaj.paf
    authenticationType jwt
    devDatabaseType postgresql
    prodDatabaseType postgresql
    clientFramework angularX
    serviceDiscoveryType eureka
    cacheProvider redis 
    languages [en, fr]
    serverPort 8080
    nativeLanguage	en
  }
}

application {
  config {
    baseName posIntegration
    applicationType microservice
    packageName com.ailaaj.paf
    authenticationType jwt
    devDatabaseType postgresql
    prodDatabaseType postgresql
    serviceDiscoveryType eureka
    cacheProvider redis 
    messageBroker kafka
    languages [en, fr]
    serverPort 8001
    nativeLanguage	en
  }
}

application {
  config {
    baseName dataProcessor
    applicationType microservice
    packageName com.ailaaj.paf
    authenticationType jwt
    devDatabaseType postgresql
    prodDatabaseType postgresql
    serviceDiscoveryType eureka
    cacheProvider redis 
    messageBroker kafka
    languages [en, fr]
    serverPort 8002
    nativeLanguage	en
  }
  entities Order, MedicineSoldPerOrder, Patient
}

application {
  config {
    baseName orderPlacer
    applicationType microservice
    packageName com.ailaaj.paf
    authenticationType jwt
    devDatabaseType postgresql
    prodDatabaseType postgresql
    serviceDiscoveryType eureka
    cacheProvider redis 
    messageBroker kafka
    languages [en, fr]
    serverPort 8003
    nativeLanguage	en
  }
  entities OrderStaus
}

application {
  config {
    baseName qrEngine
    applicationType microservice
    packageName com.ailaaj.paf
    authenticationType jwt
    devDatabaseType postgresql
    prodDatabaseType postgresql
    serviceDiscoveryType eureka
    cacheProvider redis 
    messageBroker kafka
    languages [en, fr]
    serverPort 8004
    nativeLanguage	en
  }
  entities PafAilaajMedicineSkuMap
}

application {
  config {
    baseName reporting
    applicationType microservice
    packageName com.ailaaj.paf
    authenticationType jwt
    devDatabaseType postgresql
    prodDatabaseType postgresql
    serviceDiscoveryType eureka
    cacheProvider redis 
    messageBroker kafka
    languages [en, fr]
    serverPort 8005
    nativeLanguage	en
  }
}

entity PafAilaajMedicineSkuMap {
   	ailaajMedicineId Long	
    pafMedicineId Long
    pafMedicineName	String
    medicineName String
    cFactorbrand Long
    supplier String
}

entity OrderStaus{
	orderId String,
    orderStatus String,
    invoiceStatus String
}

entity Order{
	orderId String,
    orderStatus String,
    invoiceStatus String,
    hospitalName String, // default is PAF for this POC
    createdDate Instant
}

entity MedicineSoldPerOrder{
	medicineId Long,
	medicineName String,
	medicineOrderQuantity Double,
    unitPrice Double,
    discountedPrice Double,
	issuedQuantity Integer,
    returnQuantity Integer,
    sellingDate Instant
}

entity Patient{
    mr String,
    mrPlusName String,
    ward String,
    room String,
    bed String,
    admissionDate Instant
}

relationship OneToMany{
	Patient to Order
    Order to MedicineSoldPerOrder
}

paginate all with pagination

// Use Data Transfer Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
service all with serviceImpl
